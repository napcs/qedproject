#!/usr/bin/env ruby
require 'qedproject'

require 'optparse'

banner = "QEDProject #{QEDProject::VERSION} (C) 2011 Brian P. Hogan\n"
banner << "-" * banner.length
puts banner

options = {:verbose => true, :no_overwrite => true}
LIBRARIES = QEDProject::Libraries::Base.libs.keys
OptionParser.new do |opts|
  opts.banner = "Usage: qedproject <projectname> [options]"
  opts.banner << "\nAvailable Libraries are: #{LIBRARIES.join(",")}"


  opts.on('-s', '--sass', "Use SASS") do
    options[:sass] = true
  end

  opts.on('-c', '--coffee', "Use Coffeescript") do
    options[:coffeescript] = true
  end
  
  opts.on('-a', '--assets', "Use Jammit to manage assets") do
    options[:jammit] = true
  end
    
  opts.on('-t', '--testing', "Set up testing with Jasmine") do
    options[:testing] = true
  end
  
  opts.on('-p', '--public-dir [DIR]', 'Specify the name of the public folder') do |dir|
    options[:public_dir] = dir
  end
  
  opts.on("-l", "--libs [LIBRARIES]", "comma-separated list of libraries to include") do |libs|
    options[:libs] = libs.split(",").collect{ |f| f.to_sym }
  end
  
  opts.on('-r', '--livereload', "Use LiveReload") do
     options[:livereload] = true
   end
  
  opts.on('-o', '--overwrite', "Overwrite existing files with same names") do
    options[:no_overwrite] = false
  end
  
  opts.on('--skip-index', 'Skip creating a default index.html file') do
    options[:skip_index] = true
  end
  
  opts.on('--server', 'start a webserver that serves public/') do
    options[:server] = true
  end

end.parse!
if options[:server]
  require 'webrick'
  s = WEBrick::HTTPServer.new(:Port => 1337, :DocumentRoot => File.join(Dir.pwd, "public"))
  trap('INT') { s.shutdown }
  s.start
else

  options[:verbose] = true 
  project = ARGV[0]

  if project.nil?
    puts "Specify a project. Use qedproject -h for options."
  else
    begin
      QEDProject::Project.create(project, options)
    rescue QEDProject::BadLibraryError => e
      puts e.message
      puts "QEDProject supports #{LIBRARIES.join(",")}"
    end
  end

end
