{"name":"Qedproject","body":"# What is QEDProject?\r\nQEDProject creates a simple web project skeleton with support for Sass and CoffeeScript\r\nas well as asset packaging, LiveReload support, and JavaScript testing. \r\n\r\nIt also goes great with http://qedserver.napcs.com/\r\n\r\n## Installation\r\n\r\nQEDProject is distributed as a Ruby gem. That means you'll need the Ruby programming language installed on your machine along with the RubyGems package manager.\r\n\r\nThen, simply\r\n\r\n    $ gem install qedproject\r\n\r\nto get the latest version and all its dependencies.\r\n\r\nIf you're on Windows, you'll need to install RubyInstaller and the Devkit. See http://rubyinstaller.org/add-ons/devkit/ for more.\r\n\r\nIf you're on OSX, you need to have XCode installed.\r\n\r\nIf you're on Ubuntu and you want to use CoffeeScript, you'll need to install NodeJS.\r\n\r\n## Usage\r\n\r\nGenerate a simple web project\r\n\r\n    $ qedproject myproject\r\n    $ cd myproject\r\n    \r\nThen open the public/index.html file in your browser and get to work. Of course, this is only the tip of the iceberg.\r\n   \r\n### CoffeeScript and Sass support\r\n\r\nTo generate a simple web project with CoffeeScript and Sass support, using Guard to monitor files for changes.\r\n\r\n    qedproject myproject -c -s\r\n\r\nOnce the project is created, go into the project folder and run the Guard command. \r\n    \r\n    cd myproject\r\n    guard \r\n\r\nAs you work on the Sass and CoffeeScript files, the corresponding CSS and JS files will be placed in public/javascripts and public/stylesheets respectively.   \r\n  \r\n### Asset Packaging with Jammit\r\n  \r\nGenerate a project that minifies CSS and JS files using Jammit. \r\nCreates the asset configuration file and a Guardfile.\r\n\r\n    $ qedproject myproject -a\r\n    \r\nCreate a project with CoffeeScript, Sass, and asset packaging support,\r\nusing Guard.\r\n\r\n    $ qedproject myproject -c -s -a\r\n    \r\n### Including JavaScript libraries.\r\n\r\nCreate a new project using jQuery\r\n\r\n    $ qedproject myproject -l jquery\r\n    \r\nCreate a new project using jQuery and Backbone\r\n\r\n    $ qedproject myproject -l jquery,backbone\r\n    \r\nCreate a new project using jQuery and Backbone, \r\nbut also with Sass, CoffeeScript, and asset packaging.\r\n\r\n    $ qedproject myproject -l jquery,backbone -c -s -a\r\n    \r\n\r\n### Creating projects with Jasmine BDD tests\r\n\r\nIf you'd like to create projects where you can do Jasmine testing, use the <tt>-t</tt> flag.\r\n\r\n    $ qedproject myproject -l jquery,backbone -c -s -a -t\r\n\r\nThis will create a suite.html file in the spec folder, and will create \r\na sample spec. If you asked for CoffeeScript, the sample spec will be \r\nwritten in CoffeeSript and the Guardfile will be modified to convert specs to\r\njs files.\r\n\r\nAnd if you used jQuery, the jasmine-jquery library will be added to your test suite.\r\n\r\n### Using the Server and LiveReload\r\n\r\nYou can use the `-r` flag to add LiveReload support to the project.\r\n\r\n    $ qedproject myproject -r -c -s -a -t -l jquery\r\n\r\nYou can make your browser refresh when you change your files. To do that, first open another window and type\r\n    \r\n    $ cd myproject\r\n    $ qedproject --server\r\n\r\nwhich starts up a web server on port 1337 that serves up your project's `public` folder. Then install one of the LiveReload plugins for your browser and connect your browser by visiting http://localhost:1337 and activating LiveReload.\r\n\r\nTo get the browser plugins, visit http://help.livereload.com/kb/general-use/browser-extensions\r\n\r\n\r\n## Overwriting files\r\n\r\nBy default, the CLI tool will not overwrite files with the same name. If you want to replace files, pass the <tt>-o</tt> flag.\r\n\r\n","tagline":"Quick and flexible web project generator for standalone sites or use with QEDServer.   ","google":"","note":"Don't delete this file! It's used internally to help with page regeneration."}